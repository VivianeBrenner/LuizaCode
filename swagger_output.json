{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "e-Commerce REST API",
    "description": "Documentation for the omni-channel e-commerce REST API built by ladies.get"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/clientes": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get all customers",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/CustomerArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a new customer",
        "description": "",
        "parameters": [
          {
            "name": "New Customer",
            "in": "body",
            "type": "object",
            "description": "Customer data",
            "schema": {
              "$ref": "#/definitions/CreateCustomer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully created",
            "schema": {
              "$ref": "#/definitions/GetCustomer"
            }
          },
          "500": {
            "description": "Error happened while creating the new customer"
          }
        }
      }
    },
    "/clientes/{clienteId}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Get a specific customer",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved",
            "schema": {
              "$ref": "#/definitions/GetCustomer"
            }
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Update a specific customer",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Update Customer",
            "in": "body",
            "type": "object",
            "description": "Customer new data",
            "schema": {
              "$ref": "#/definitions/CreateCustomer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully updated",
            "schema": {
              "$ref": "#/definitions/GetCustomer"
            }
          },
          "404": {
            "description": "Customer not found"
          },
          "500": {
            "description": "Error happened while updating the customer"
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete a customer",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Cannot delete customer because of FK relation"
          }
        }
      }
    },
    "/clientes/{clienteId}/pedidos": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders for a customer",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved",
            "schema": {
              "$ref": "#/definitions/GetOrderArray"
            }
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    },
    "/clientes/{clienteId}/pedidos/{pedidoId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a customer",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pedidoId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved",
            "schema": {
              "$ref": "#/definitions/GetPickedupOrder"
            }
          },
          "404": {
            "description": "Customer or Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Change order status to \"picked-up\"",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pedidoId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Release Order",
            "in": "body",
            "type": "object",
            "description": "Release order data",
            "schema": {
              "$ref": "#/definitions/ReleaseOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order successfully updated",
            "schema": {
              "$ref": "#/definitions/GetPickedupOrder"
            }
          },
          "404": {
            "description": "Customer or Order not found"
          },
          "500": {
            "description": "Error happened while updating the order status"
          }
        }
      }
    },
    "/produtos": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Products list",
            "schema": {
              "$ref": "#/definitions/ProductArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create new product",
        "description": "",
        "parameters": [
          {
            "name": "New Product",
            "in": "body",
            "type": "object",
            "description": "Product data",
            "schema": {
              "$ref": "#/definitions/CreateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product successfully created",
            "schema": {
              "$ref": "#/definitions/GetProduct"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error happened while creating the new product"
          }
        }
      }
    },
    "/produtos/{produtoId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a specific product",
        "description": "",
        "parameters": [
          {
            "name": "produtoId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved",
            "schema": {
              "$ref": "#/definitions/GetProduct"
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update a specific product",
        "description": "",
        "parameters": [
          {
            "name": "produtoId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Update Product",
            "in": "body",
            "type": "object",
            "description": "Product new data",
            "schema": {
              "$ref": "#/definitions/CreateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product successfully updated",
            "schema": {
              "$ref": "#/definitions/GetProduct"
            }
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Error happened while updating the product"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete a specific product",
        "description": "",
        "parameters": [
          {
            "name": "produtoId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Cannot delete product because of FK relation"
          }
        }
      }
    },
    "/lojas": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get all stores",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Store list",
            "schema": {
              "$ref": "#/definitions/StoreArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stores"
        ],
        "summary": "Create a new store",
        "description": "",
        "parameters": [
          {
            "name": "New Store",
            "in": "body",
            "type": "object",
            "description": "Store data",
            "schema": {
              "$ref": "#/definitions/CreateStore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store successfully created",
            "schema": {
              "$ref": "#/definitions/GetStore"
            }
          },
          "500": {
            "description": "Error happened while creating the new store."
          }
        }
      }
    },
    "/lojas/{lojaId}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a specific store",
        "description": "",
        "parameters": [
          {
            "name": "lojaId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Store retrieved",
            "schema": {
              "$ref": "#/definitions/GetStore"
            }
          },
          "404": {
            "description": "Store not found"
          }
        }
      },
      "put": {
        "tags": [
          "Stores"
        ],
        "summary": "Update a specific store",
        "description": "",
        "parameters": [
          {
            "name": "lojaId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Update Store",
            "in": "body",
            "type": "object",
            "description": "Store new data",
            "schema": {
              "$ref": "#/definitions/CreateStore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store updated successfully",
            "schema": {
              "$ref": "#/definitions/GetStore"
            }
          },
          "404": {
            "description": "Store not found"
          },
          "500": {
            "description": "Error happened while updating the store."
          }
        }
      },
      "delete": {
        "tags": [
          "Stores"
        ],
        "summary": "Delete a specific store",
        "description": "",
        "parameters": [
          {
            "name": "lojaId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Cannot delete store because of FK relation"
          }
        }
      }
    },
    "/clientes/{clienteId}/carrinho": {
      "get": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Get a customer's shopping cart",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of cart items",
            "schema": {
              "$ref": "#/definitions/CartItemArray"
            }
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "put": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Update a customer",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Update Shopping Cart",
            "in": "body",
            "type": "object",
            "description": "Shopping cart new items",
            "schema": {
              "$ref": "#/definitions/AddCartItemArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cart items",
            "schema": {
              "$ref": "#/definitions/CartItemArray"
            }
          },
          "500": {
            "description": "An unknown error happenned. Try again please."
          }
        }
      },
      "delete": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Empty a customer's shopping cart",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/clientes/{clienteId}/carrinho/checkout": {
      "put": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Checkout a customer",
        "description": "",
        "parameters": [
          {
            "name": "clienteId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Checkout",
            "in": "body",
            "type": "object",
            "description": "Checkout current cart",
            "schema": {
              "$ref": "#/definitions/Checkout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cart items",
            "schema": {
              "$ref": "#/definitions/CartItemArray"
            }
          },
          "403": {
            "description": "Your cart is currently empty. Nothing to be checked out."
          },
          "404": {
            "description": "Error! Malformed request body."
          },
          "500": {
            "description": "Error. Please check you have the right store Id."
          }
        }
      }
    }
  },
  "definitions": {
    "CreateCustomer": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "john@doe.com"
        },
        "password": {
          "type": "string",
          "example": "asdf33lasdf32ZZ"
        }
      }
    },
    "GetCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "john@doe.com"
        },
        "password": {
          "type": "string",
          "example": "asdf33lasdf32ZZ"
        }
      }
    },
    "CustomerArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetCustomer"
      }
    },
    "CreateStore": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Magazine Luiza"
        },
        "phone": {
          "type": "string",
          "example": "+55 33 99956-2696"
        },
        "address": {
          "type": "string",
          "example": "Rua Raul Sores, numero 46, bairro Centro, Caratinga-MG"
        }
      }
    },
    "GetStore": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Magazine Luiza"
        },
        "phone": {
          "type": "string",
          "example": "+55 33 99956-2696"
        },
        "address": {
          "type": "string",
          "example": "Rua Raul Sores, numero 46, bairro Centro, Caratinga-MG"
        }
      }
    },
    "StoreArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetStore"
      }
    },
    "CreateProduct": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Product A"
        },
        "imageUrl": {
          "type": "string",
          "example": "https://google.image.com"
        },
        "price": {
          "type": "number",
          "example": 12.4
        }
      }
    },
    "GetProduct": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Product A"
        },
        "imageUrl": {
          "type": "string",
          "example": "https://google.image.com"
        },
        "price": {
          "type": "string",
          "example": "12.40"
        }
      }
    },
    "ProductArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetProduct"
      }
    },
    "isPickedUpStatus": {
      "type": "object",
      "properties": {
        "isPickedup": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "GetOrderItem": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "number",
          "example": 1
        },
        "productName": {
          "type": "string",
          "example": "Product A"
        },
        "price": {
          "type": "number",
          "example": 12.4
        },
        "amount": {
          "type": "number",
          "example": 2
        },
        "subTotal": {
          "type": "number",
          "example": 24.8
        }
      }
    },
    "GetOrderItemArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetOrderItem"
      }
    },
    "GetCartItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Product A"
        },
        "imageUrl": {
          "type": "string",
          "example": "https://google.image.com"
        },
        "price": {
          "type": "string",
          "example": "12.40"
        },
        "amount": {
          "type": "string",
          "example": "2"
        }
      }
    },
    "CartItemArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetCartItem"
      }
    },
    "AddCartItem": {
      "type": "object",
      "properties": {
        "produtoId": {
          "type": "number",
          "example": 1
        },
        "quantidade": {
          "type": "number",
          "example": 2
        }
      }
    },
    "AddCartItemArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AddCartItem"
      }
    },
    "UpdateCart": {
      "type": "object",
      "properties": {
        "produtos": {
          "$ref": "#/definitions/AddCartItemArray"
        }
      }
    },
    "Checkout": {
      "type": "object",
      "properties": {
        "storeId": {
          "type": "number",
          "example": 1
        }
      }
    },
    "ReleaseOrder": {
      "type": "object",
      "properties": {
        "isPickedup": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "GetPlacedOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "total": {
          "type": "number",
          "example": 100.12
        },
        "isPickedup": {
          "type": "number",
          "example": 0
        },
        "datePlaced": {
          "type": "string",
          "example": "13-09-2021"
        },
        "datePickedup": {
          "type": "string",
          "example": ""
        },
        "store": {
          "$ref": "#/definitions/GetStore"
        },
        "items": {
          "$ref": "#/definitions/GetOrderItemArray"
        }
      }
    },
    "GetPickedupOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "total": {
          "type": "number",
          "example": 100.12
        },
        "isPickedup": {
          "type": "number",
          "example": 1
        },
        "datePlaced": {
          "type": "string",
          "example": "13-09-2021"
        },
        "datePickedup": {
          "type": "string",
          "example": "14-09-2021"
        },
        "store": {
          "$ref": "#/definitions/GetStore"
        },
        "items": {
          "$ref": "#/definitions/GetOrderItemArray"
        }
      }
    },
    "GetOrderArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetPickedupOrder"
      }
    }
  }
}